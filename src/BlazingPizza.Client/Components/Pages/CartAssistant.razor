@page "/assist/cart"
@inject HttpClient Http
@inject OrderState OrderState

<h3>Cart Assistant</h3>
<input @bind="utterance" class="form-control" placeholder="Add two pepperoni 12-inch with extra cheese" />
<button class="btn btn-primary mt-2" @onclick="Run" disabled="@busy">@((busy?"Working...":"Plan & Apply"))</button>
<span class="text-danger ms-2">@error</span>

<pre>@planJson</pre>

@code {
  string utterance = "Add two pepperoni 12-inch with extra cheese";
  string? planJson;
  string? error;
  bool busy;

  async Task Run()
  {
    error = null; busy = true; StateHasChanged();
    try
    {
      var res = await Http.PostAsJsonAsync("api/assist/cart", new { utterance });
      planJson = await res.Content.ReadAsStringAsync();
      CartPlan? plan = null;
      try { plan = await res.Content.ReadFromJsonAsync<CartPlan>(); }
      catch { }
      if (plan is null) return;

      foreach (var a in plan.Actions)
      {
        switch (a.Type)
        {
          case "clear_cart":
            OrderState.ResetOrder();
            break;
          case "add_pizza":
            // Minimal add: rely on Configure dialog path to populate Special/Topping objects
            int clampedSize = Math.Min(Math.Max(a.Size, Pizza.MinimumSize), Pizza.MaximumSize);
            for (var i = 0; i < Math.Max(1, a.Quantity); i++)
            {
              var p = new Pizza { SpecialId = a.SpecialId ?? 0, Size = clampedSize };
              OrderState.Order.Pizzas.Add(p);
            }
            break;
        }
      }
      StateHasChanged();
    }
    catch (Exception ex)
    {
      error = ex.Message;
    }
    finally
    {
      busy = false;
    }
  }

  public record CartPlan(CartAction[] Actions);
  public record CartAction(string Type, int? SpecialId, int Quantity, int Size, int[]? ToppingIds);
}


