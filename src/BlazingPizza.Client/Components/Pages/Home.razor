@page "/"
@rendermode InteractiveWebAssembly
@inject IRepository PizzaStore
@inject IJSRuntime JSRuntime
@inject OrderState OrderState
@inject NavigationManager NavigationManager


<PageTitle>Blazing Pizzas</PageTitle>

<div class="main">
	<ul class="pizza-cards">
		@if (specials is not null)
		{
            @foreach (var special in specials)
            {
                <li style="background-image: url('@special.ImageUrl')">
                    <div class="pizza-info" role="button" tabindex="0" @onclick="@(()=>SelectSpecial(special))">
						<span class="title">@special.Name</span>
						@special.Description
						<span class="price">@special.GetFormattedBasePrice()</span>
					</div>
				</li>
			}
		}
	</ul>
</div>

<div class="sidebar">
	<!-- Inline Cart Assistant: always visible -->
	<div class="mb-2">
		<input @bind="assistantUtterance" class="form-control" placeholder="e.g., Add two pepperoni 12-inch with extra cheese" />
		<button class="btn btn-sm btn-primary mt-1" @onclick="RunAssistant" disabled="@assistantBusy">@((assistantBusy?"Working...":"Plan & Apply"))</button>
		<span class="text-danger ms-2">@assistantError</span>
	</div>

	@if (OrderState.Order.Pizzas.Any())
	{
		<div class="order-contents">
			<h2>Your order</h2>
			@foreach (var configuredPizza in OrderState.Order.Pizzas)
			{
				<ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(() => RemovePizza(configuredPizza))" />
			}
		</div>
	}
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

	<div class="order-total @(OrderState.Order.Pizzas.Any() ? "" : "hidden")">
		Total:
		<span class="total-price">@OrderState.Order.GetFormattedTotalPrice()</span>
		<a href="checkout" class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
			Order >
		</a>
	</div>
</div>

<BlazingPizza.ComponentsLibrary.TemplatedDialog Show="OrderState.ShowingConfigureDialog">
	<ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza"
									OnCancel="CancelConfigure"
									OnConfirm="ConfirmConfigure" />
</BlazingPizza.ComponentsLibrary.TemplatedDialog>

@code {
List<PizzaSpecial>? specials;
List<Topping>? toppings;

	protected override async Task OnInitializedAsync()
	{
		specials = await PizzaStore.GetSpecials();
		toppings = await PizzaStore.GetToppings();
		OrderState.JSRuntime = JSRuntime;
	}

	async Task RemovePizza(Pizza configuredPizza)
	{
		if (await JSRuntime.Confirm($"Remove {configuredPizza.Special?.Name} pizza from the order?"))
		{
			OrderState.RemoveConfiguredPizza(configuredPizza);
		}
	}

    void SelectSpecial(PizzaSpecial special)
    {
        OrderState.ShowConfigurePizzaDialog(special);
        StateHasChanged();
    }

    void CancelConfigure()
    {
        OrderState.CancelConfigurePizzaDialog();
        StateHasChanged();
    }

    void ConfirmConfigure()
    {
        OrderState.ConfirmConfigurePizzaDialog();
        StateHasChanged();
    }

    // Inline assistant state and actions
    string assistantUtterance = "Add two pepperoni 12\" with extra cheese";
    bool assistantBusy;
    string? assistantError;

    async Task RunAssistant()
    {
        assistantError = null; assistantBusy = true; StateHasChanged();
        try
        {
            using var http = new HttpClient { BaseAddress = new Uri(NavigationManager.BaseUri) };
            var res = await http.PostAsJsonAsync("api/assist/cart", new { utterance = assistantUtterance });
            CartPlan? plan = null;
            try { plan = await res.Content.ReadFromJsonAsync<CartPlan>(); }
            catch { }
            if (plan is null) return;
            foreach (var a in plan.Actions)
            {
                switch (a.Type)
                {
                    case "clear_cart":
                        OrderState.ResetOrder();
                        break;
                    case "add_pizza":
                        int clampedSize = Math.Min(Math.Max(a.Size, Pizza.MinimumSize), Pizza.MaximumSize);
                        for (var i = 0; i < Math.Max(1, a.Quantity); i++)
                        {
                            var special = (specials ?? new()).FirstOrDefault(s => s.Id == (a.SpecialId ?? 0))
                                ?? (specials ?? new()).FirstOrDefault();
                            if (special is null) continue;

                            var p = new Pizza { SpecialId = special.Id, Special = special, Size = clampedSize };
                            var toppingObjs = (a.ToppingIds ?? Array.Empty<int>())
                                .Select(id => (toppings ?? new()).FirstOrDefault(t => t.Id == id))
                                .Where(t => t is not null)
                                .Select(t => new PizzaTopping { ToppingId = t!.Id, Topping = t })
                                .ToList();
                            p.Toppings = toppingObjs;
                            OrderState.Order.Pizzas.Add(p);
                        }
                        break;
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            assistantError = ex.Message;
        }
        finally
        {
            assistantBusy = false;
        }
    }

    public record CartPlan(CartAction[] Actions);
    public record CartAction(string Type, int? SpecialId, int Quantity, int Size, int[]? ToppingIds);

}